from pathlib import Path
import json
import os
from glob import iglob

PART_PATH = "{component}/{car_class}/{part_id}"
RESULT_FILE_PATH = "{component}/{car_class}/{part_id}/results"
PART_RESULT = "{component}/{car_class}/{part_id}/result.txt"
COMPONENTS = ["component_1", "component_2", "component_3", "component_4", "component_5"]
CAR_CLASSES = ["class_1", "class_2"]
SOURCES = ["source_1", "source_2", "source_3", "source_4"]
NUMBER_OF_PARTS = 3
PART_RESULT_FILES = [Path(part_path) / "result.txt" for part_path in iglob("*/*/*")]


rule all:
    input:
        PART_RESULT_FILES

checkpoint generate_results:
    input:
        PART_PATH
    output:
        directory(RESULT_FILE_PATH)
    params:
        part_id = lambda wildcards: wildcards.get("part_id")
    run:
        results_dir = Path(input[0]) / "results"
        os.mkdir(results_dir)
        for index, source in enumerate(SOURCES):
            source_dir = results_dir / source
            os.mkdir(source_dir)
            result_filename = source_dir / f"{params.part_id}.txt"
            with open(result_filename, "w") as result_file:
                result_file.write(str(index))

def aggregate_source_results(wildcards):
    checkpoint_output = checkpoints.generate_results.get(**wildcards).output[0]
    paths = expand(f"{wildcards.component}/{wildcards.car_class}/{wildcards.part_id}/results/{{source}}/{wildcards.part_id}.txt",
                source=glob_wildcards(os.path.join(checkpoint_output, f"{{source}}/{wildcards.part_id}.txt")).source)
    return paths

rule aggergate_results:
    input:
        aggregate_source_results
    output:
        PART_RESULT
    run:
        output_str = ""
        for filepath in input:
            with open(filepath) as file:
                output_str += file.read()
        with open(output[0], "w") as output_file:
            output_file.write(output_str)



    